** Cmake-lang
*** public|interface|provate target_link_libraries
Generally, a dependency should be specified in a use of target_link_libraries()
with the PRIVATE keyword if it is used by only the implementation of a library,
and not in the header files. If a dependency is additionally used in the header
files of a library (e.g. for class inheritance), then it should be specified as
a PUBLIC dependency.
*** Custom commands and target
#+BEGIN_SRC cmake
# Use $make clean -> to clean the folder
cmake_minimum_required(VERSION 3.10)

# set the project name
project(Hi)

# Use "ALL" to indicate that "Always build this target"
add_custom_target(MyTarget2 ALL echo üê∏ The dir is ${CMAKE_CURRENT_SOURCE_DIR})

# "If you want a hi.txt: use the following commands":
add_custom_command(OUTPUT hi.txt
COMMAND touch hi.txt
VERBATIM
)

# Build this target (ALL), which depends on hi.txt
add_custom_target(MyTarget ALL echo hi DEPENDS hi.txt)



#+END_SRC
*** the run target
#+begin_src cmake
add_custom_target(run ALL myexe 1 COMMENT "Runing App üê∏")
# run $myexe 1
#+end_src
*** DONE POST_BUILD: do something to the build file after it's build
#+BEGIN_SRC cmake
cmake_minimum_required(VERSION 3.10)
project(Hi)

file(WRITE hi.c "#include<stdio.h>\n int main(){puts(\"Hi üê∏, Program is run\");return 0;}")
add_executable(hi hi.c)
add_custom_target(run ALL hi COMMENT "Run the program")   #run the program

add_custom_command(             #time the program
TARGET hi POST_BUILD
COMMAND time "$<TARGET_FILE:hi>"
VERBATIM
COMMENT "Time the program")
#+END_SRC
*** var
**** set my var
#+BEGIN_SRC cmake
cmake_minimum_required(VERSION 3.10)
project(Hi)
set(a 123)
add_custom_target(myTarget ALL echo My var is ${a}
COMMENT "Yes, it's ${a}")

# me@linux-orange:~/Templates/lrn/cpp/cmake/fun/out$ cmake .. && cmake --build .
# -- Configuring done
# -- Generating done
# -- Build files have been written to: /home/me/Templates/lrn/cpp/cmake/fun/out
# [100%] Yes, it's 123
# My var is 123
# [100%] Built target myTarget

#+END_SRC
**** important cmake var
#+begin_src cmake
cmake_minimum_required(VERSION 3.21)
project(m VERSION 1.1)
# add_custom_target(say ALL echo "Install dir: ${CMAKE_INSTALL_PREFIX}")
message( "Install dir: ${CMAKE_INSTALL_PREFIX}") #‚áí usr/local
message( "Prefix path: ${CMAKE_PREFIX_PATH}") #‚áí user prefix for find_package
message( "System Prefix path: ${CMAKE_SYSTEM_PREFIX_PATH}") #‚áí the prefix for find_package

# rm -rf * && cmake .. && cmake --build .
#+end_src
**** generator expression
***** View a generator expression
    #+begin_src cmake
    cmake_minimum_required(VERSION 3.21)
project(m VERSION 1.1)

add_executable(hi hi.c)

message( "CMAKE command : ${CMAKE_COMMAND}")
# message( "C++ compiler version: ${CXX_COMPILER_VERSION}")
# message( "C compiler id: ${C_COMPILER_ID}")
# message( "C compiler version: ${C_COMPILER_VERSION}")

function(show_gen_expr e)
add_custom_command(TARGET hi POST_BUILD
  COMMAND ${CMAKE_COMMAND} -E echo
  "${e} = $<${e}>")
endfunction()


show_gen_expr(CXX_COMPILER_ID)

# rm -rf * && cmake .. && cmake --build .


#+end_src
***** More details
#+begin_src cmake
cmake_minimum_required(VERSION 3.21)
project(m VERSION 1.1)

add_executable(hi hi.c)

message( "CMAKE command : ${CMAKE_COMMAND}")
# message( "C++ compiler version: ${CXX_COMPILER_VERSION}")
# message( "C compiler id: ${C_COMPILER_ID}")
# message( "C compiler version: ${C_COMPILER_VERSION}")

function(format_it fmt s npad out)
# Set the var ${out}. Embed the string s in front of fmt. Also pad npad space
# in the front

string(LENGTH ${s} l)
# message("l is ${l}")
string(SUBSTRING ${fmt} ${l} -1 c)
# message("c is ${c}")
# message("out is ${out}")
string(REPEAT " " ${npad} npad)
# string(CONCAT ${out} "${npad}${s}" "${c}")
set(${out} "${npad}${s}${c}" PARENT_SCOPE) #return the value
endfunction()
# format_it(123456789 cmake 5 o)

function(show_gen_expr e)
  string(REPEAT " " 60 spaces) #The left padding
  format_it(${spaces} ${e} 5 pre)
  add_custom_command(TARGET hi POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E echo
    "${pre} : $<${e}>")
endfunction()


show_gen_expr(CXX_COMPILER_ID)
show_gen_expr(CXX_COMPILER_VERSION)
show_gen_expr(STREQUAL:hi,hi)
show_gen_expr(IN_LIST:hi,hi;oh;wo)
show_gen_expr(IN_LIST:ha,hi;oh;wo)
show_gen_expr(BOOL:NO)
show_gen_expr(BOOL:NOTFOUND)
show_gen_expr(BOOL:YEAH)
show_gen_expr(BOOL:YEAH)
show_gen_expr(1:This_is_shown)
show_gen_expr(0:This_is_not_shown)

# A very common pattern
# target_include_directories(
#   MyTarget
#   PUBLIC
#   $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
#   $<INSTALL_INTERFACE:include>
# )

show_gen_expr(BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include)
show_gen_expr(INSTALL_INTERFACE:include)

# rm -rf * && cmake .. && cmake --build .


#+end_src
*** function
#+BEGIN_SRC cmake
cmake_minimum_required(VERSION 3.10)
project(Hi)

function(f)
add_custom_target(hi ALL echo "hiya" COMMENT hiya)
endfunction()
f()
# -- Configuring done
# -- Generating done
# -- Build files have been written to: /home/me/Templates/lrn/cpp/cmake/fun/out
# [100%] hiya
# hiya
# [100%] Built target hi


function(g x y)
add_custom_target(hi2 ALL echo "x : ${x}" COMMENT "y is ${y}")
endfunction()
g(XX YY)
# [ 50%] y is YY
# x : XX


#+END_SRC
*** file
**** write
#+BEGIN_SRC cmake

cmake_minimum_required(VERSION 3.10)
project(Hi)

# file(WRITE <filename> <content>...)
# file(APPEND <filename> <content>...)
add_custom_target(hi ALL date COMMENT "The build dir is ${CMAKE_CURRENT_BINARY_DIR}")
add_custom_target(hi2 ALL date COMMENT "The binery dir is ${PROJECT_BINARY_DIR}")
file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/hi.txt "hi ")
#by default write to the CMAKE_CURRENT_SOURCE_DIR

#+END_SRC
*** Install
**** change the install dir for a project

CMake sets this variable (~CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT~) to a
TRUE value when the CMAKE_INSTALL_PREFIX has just been initialized to its
default value, typically on the first run of CMake within a new build tree. This
can be used by project code to change the default without overriding a
user-provided value:

#+BEGIN_SRC cmake
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
set(CMAKE_INSTALL_PREFIX "/my/default" CACHE PATH "..." FORCE)
endif()
#+END_SRC

**** the CMAKE_INSTALL_PREFIX
The installation prefix is also added to CMAKE_SYSTEM_PREFIX_PATH so that
find_package(), find_program(), find_library(), find_path(), and find_file()
will search the prefix for other software.
***** For unix user
DESTDIR¬∂

This is a CMake Environment Variable. Its initial value is taken from the
calling process environment.

On UNIX one can use the DESTDIR mechanism in order to relocate the whole
installation. DESTDIR means DESTination DIRectory. It is commonly used by
makefile users in order to install software at non-default location. It is
usually invoked like this:

#+BEGIN_SRC bash
make DESTDIR=/home/john install
#+END_SRC

which will install the concerned software using the installation prefix, e.g.
/usr/local prepended with the DESTDIR value which finally gives
/home/john/usr/local.

WARNING: DESTDIR may not be used on Windows because installation prefix usually
contains a drive letter like in C:/Program Files which cannot be prepended with
some other prefix.
*** add target compile definition
#+begin_src cmake
target_compile_definitions(foo PUBLIC FOO)
target_compile_definitions(foo PUBLIC -DFOO)  # -D removed
target_compile_definitions(foo PUBLIC "" FOO) # "" ignored
target_compile_definitions(foo PUBLIC -D FOO) # -D becomes "", then ignored
#+end_src
*** Reuse cmake project
**** link to obj to other folder 
import all targets defined in the CMakeLists.txt in ../my_test whose objects are
built in ../my_test_build
#+begin_src cmake
  add_subdirectory(../my_test ../my_test_build)
#+end_src
**** create cmake package
***** server
.
‚îú‚îÄ‚îÄ CMakeLists.txt
‚îú‚îÄ‚îÄ Config.cmake.in
‚îú‚îÄ‚îÄ my_cmake_lib.cpp
‚îú‚îÄ‚îÄ my_cmake_lib.h
‚îú‚îÄ‚îÄ my_config_and_install.cmake
‚îî‚îÄ‚îÄ write_version.cmake
In which:
****** CMakeLists.txt
#+begin_src cmake
cmake_minimum_required(VERSION 3.15)
project(m)

# make cache variables for install destinations
include(GNUInstallDirs)       #set the ${CMAKE_INSTALL_INCLUDEDIR}
message("The install_include_dir is ${CMAKE_INSTALL_INCLUDEDIR")

add_library(my_cmake_lib STATIC my_cmake_lib.cpp)
target_include_directories(my_cmake_lib
PUBLIC
"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>"
"$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>"
)

include(CMakePackageConfigHelpers)
include(my_config_and_install.cmake)
#provide the create_my_config_file() and install_my_target()

create_my_config_file(my_cmake_lib)
install_my_target(my_cmake_lib)
include(write_version.cmake)
write_my_version(my_cmake_lib 1.2.3)

# cd ../my_cmake_lib.build
# clear && rm -rf * && cmake ../my_cmake_lib
# cmake --build . && cmake --install . --prefix my-install


#+end_src
****** Config.cmake.in
#+begin_src cmake
# This file the is the input template, hand-typped by Jianer

# The following expends on build. It provides the check_required_components()
# and set_and_check() macro.
@PACKAGE_INIT@

include("${CMAKE_CURRENT_LIST_DIR}/my_cmake_libTargets.cmake")

# The following inspect the <package>_<component>_FOUND var
# and set the <package>_FOUND if nothing went wrong
check_required_components(my_cmake_lib)

#+end_src
****** my_cmake_lib.cpp
#+begin_src c++
#include "my_cmake_lib.h"

#include <cstdio>

namespace my_cmake_lib {
void f1(){
  printf("I am from my_cmake_lib üê∏\n");
}
}

#+end_src
****** my_cmake_lib.h
#+begin_src c
#pragma once
namespace my_cmake_lib{
void f1();
}

#+end_src
****** my_config_and_install.cmake
#+begin_src cmake

function(create_my_config_file pkg)
# Create the package configure file for the package named `pkg`
set(my_config_build_file
  ${CMAKE_CURRENT_BINARY_DIR}/${pkg}Config.cmake)
set(my_config_install_dir
  ${CMAKE_INSTALL_LIBDIR}/cmake/${pkg} )

message("The my_config_install_dir is ${my_config_install_dir}")

configure_package_config_file(
  # The input template:
  ${CMAKE_CURRENT_SOURCE_DIR}/Config.cmake.in
  # The output generated on build
  ${my_config_build_file}
  # The output generated on install
  INSTALL_DESTINATION
  ${my_config_install_dir}
  )

# Install the generated <pkg>Config.cmake and <pkg>ConfigVersion.cmake
install(FILES
  ${my_config_build_file}
  ${CMAKE_CURRENT_BINARY_DIR}/${pkg}ConfigVersion.cmake
  DESTINATION
  ${my_config_install_dir}
  )

# return the value
set(my_config_install_dir ${my_config_install_dir} PARENT_SCOPE)
endfunction()

# Install the target
function(install_my_target x)
#We use an install(targets) to install the library (the lib<pkg>.a file)
install(TARGETS ${x}
  EXPORT ${x}Targets
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
  INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  )

# Install the header file (<pkg>.h file)
install(FILES ${x}.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

# Install the target export details (the <pkg>Targets.cmake files)
install(EXPORT ${x}Targets
  FILE ${x}Targets.cmake #‚áí ${x}Targets.cmake : the description file
  NAMESPACE ${x}::       #The exported target name will have this prefix
  DESTINATION ${my_config_install_dir}
  )
endfunction()


#+end_src
****** write_my_version.cmake
#+begin_src cmake
set(version 1.2.3)
function(write_my_version pkg v)
set_property(TARGET ${pkg} PROPERTY VERSION ${v})

# Macro from CMakePackageConfigHelpers
write_basic_package_version_file(
  "${CMAKE_CURRENT_BINARY_DIR}/${pkg}ConfigVersion.cmake"
  VERSION "${v}"
  COMPATIBILITY AnyNewerVersion
  )
endfunction()
write_my_version(my_cmake_lib ${version})

#+end_src
***** client
‚îú‚îÄ‚îÄ CMakeLists.txt
‚îî‚îÄ‚îÄ m.cpp
****** CMakeLists.txt
#+begin_src cmake
cmake_minimum_required(VERSION 3.21)
project(MyCMakeUser VERSION 1.1)

# Do one of the following two to include the dir that install the my_cmake_libConfig.cmake
# set(CMAKE_PREFIX_PAth "../my_cmake_lib.build/my-install/lib/cmake/my_cmake_lib")
set(my_cmake_lib_DIR "../my_cmake_lib.build/my-install/lib/cmake/my_cmake_lib")

# So the version can be 1.2.2, 1.2.3 but not 1.2.4.
# If you change to 1.2.4, you recieve :

# The following configuration files were considered but not accepted:
# /home/me/Templates/lrn/cpp/cmake/import/my_cmake_lib_usr/../my_cmake_lib.build/my-install/lib/cmake/my_cmake_lib/my_cmake_libConfig.cmake,version: 1.2.3


find_package(my_cmake_lib 1.2.3)

add_executable(m m.cpp)
target_link_libraries(m PRIVATE my_cmake_lib::my_cmake_lib)

add_custom_target(run ALL m COMMENTS "Running üê∏")

#+end_src
****** m.cpp
#+begin_src c++
#include "my_cmake_lib.h"
#include <cstdio>
int main(int argc, char *argv[]){
printf("I will call the f1() in my_cmake_lib:\n\t");
my_cmake_lib::f1();
printf("Yep\n");
return 0;
}

#+end_src
*** string and format
**** basic
#+begin_src cmake
function(test_format)
set(a "123456789")
set(b "cmake")

string(LENGTH ${b} l)
message("l is ${l}")
string(SUBSTRING ${a} ${l} -1 c)
string(CONCAT d ${b} ${c})
message("c is ${c}")
message("d is ${d}")          #cmake6789
endfunction()

#+end_src
**** my_format_print
#+begin_src cmake
function(format_it fmt s npad out)
# Set the var ${out}. Embed the string s in front of fmt. Also pad npad space
# in the front

string(LENGTH ${s} l)
# message("l is ${l}")
string(SUBSTRING ${fmt} ${l} -1 c)
# message("c is ${c}")
# message("out is ${out}")
string(REPEAT " " ${npad} npad)
# string(CONCAT ${out} "${npad}${s}" "${c}")
set(${out} "${npad}${s}${c}" PARENT_SCOPE) #return the value
endfunction()


#+end_src
*** book
**** first step
***** script
#+begin_src cmake
# An example of a script

cmake_minimum_required(VERSION 3.20.0)

message("Hello world")

file(WRITE Hello.txt "I am writing to a file")
#+end_src
run a script
#+begin_src bash
cmake -P script.cmake
#+end_src
***** Util module
Modules are written in the CMake language and contain macro definitions,
variables, and commands that perform all kinds of functions use
~include(<module>)~.
***** Find-modules
CMake provides over 150 modules that are able to locate different packages in
the system.e.g. ~FindCURL~ module searches cURL and defines
following variables:
+ CURL_FOUND
+ CURL_INCLUDE_DIRS
+ CURL_INCLUDE_LIBRARIES
+ CURL_VERSION_STRING.

**** lang
***** block comment
#+begin_src cmake

#[=[

bracket comment

#]=]
#+end_src

**** Link
Building a correctly linked executable heavily depends on a valid configuration
(and taking care of such minute details as position-independent code (PIC).

We'll learn about another nuisance of linking ‚Äì the One Definition Rule (ODR).

*** if()
#+begin_src cmake
if(<condition>)
<commands>
elseif(<condition>) # optional block, can be repeated
<commands>
else()              # optional block
<commands>
endif()
#+end_src

*** specify C++ standard fs
#+begin_src cmake
cmake_minimum_required(VERSION 3.10)

# set the project name and version
project(Hi VERSION 1.0)

# specify the C++ standard
add_library(my_compiler_flags INTERFACE)
target_compile_features(my_compiler_flags INTERFACE cxx_std_11)

add_subdirectory(mylib)

# add the executable
add_executable(Hi hi.cpp)
target_link_libraries(Hi PUBLIC mylib my_compiler_flags)

# add the binary tree to the search path for include files
# so that we will find TutorialConfig.h
target_include_directories(Hi PUBLIC
"${PROJECT_BINARY_DIR}"
)

# run
add_custom_target(run ALL Hi COMMENT "Runing App üê∏")
#+end_src
** Target
*** Target attributes
#+begin_src cmake
cmake_minimum_required(VERSION 3.20.0)
project(hi)

find_Package(Boost COMPONENTS log)
message("üê∏ Find boost: ${Boost_FOUND}")
include(CMakePrintHelpers)
cmake_print_properties(TARGETS Boost::log PROPERTIES TYPE SOURCE_DIR)

#+end_src
*** build a particular target
cmake --build . --target Library1 Library2
** find_package
+ CONFIG keyward lets it find the <pkg>Config file
** ctest
# cmake ..
# cmake --build .
# ctest -N                        #show what tests to run(no run)
# ctest                           #run all tests
# ctest -V                        #run all (verbosely)
# ctest -R Runs                   #run the test match(regex) "Run"

Specify test-dir
#+begin_src bash
ctest --test-dir rock-storage/ -N
#+end_src
* End


# Local Variables:
# org-what-lang-is-for: "cmake"
# End:
