* GIS
** basic plot and sf manip
#+begin_src R
  library(sf)
library(terra)
library(spData)
library(spDataLarge)


plot(world)
summary(world["lifeExp"])
##First two rows, first 3 cols
w2 = world[1:2,1:3]


## The old one
## df = st_read(system.file("shape/nc.shp", package="sf"))

## The tibble one
df = read_sf(system.file("shape/nc.shp", package="sf"))
class(df)

## Plot em
plot(world[3:6])
plot(world["pop"])

## Get subset
world_asia = world[world$continent == "Asia", ]
## Combine all polygons
asia = st_union(world_asia)

## Plot with color
plot(world["pop"], reset = FALSE)
plot(asia, add = TRUE, col = "red")

## Add elements to plot
plot(world["continent"], reset = FALSE)
cex = sqrt(world$pop) / 10000
world_cents = st_centroid(world, of_largest = TRUE)
plot(st_geometry(world_cents), add = TRUE, cex = cex)

## How to make bold the border
india = world[world$name_long == "India", ]
plot(st_geometry(india), expandBB = c(0, 0.2, 0.1, 1), col = "gray", lwd = 3)
plot(world_asia[0], add = TRUE)

#+end_src
** simple feature
#+begin_src R
library(sf) #class and functions for vector data
library(terra) #classes and functions for raster data
library(dplyr)
go <- function() source('hi.R')

p0 <- st_point(c(5, 2))                 # XY point
p1 <- st_point(c(5, 2, 3))              # XYZ point
p2 <- st_point(c(5, 2, 1), dim = "XYM") # XYM point
p3 <- st_point(c(5, 2, 3, 1))           # XYZM point


## Use matrix to create points and lines

## the rbind function simplifies the creation of matrices
## MULTIPOINT
multipoint_matrix = rbind(c(5, 2), c(1, 3), c(3, 4), c(3, 2))
mp <- st_multipoint(multipoint_matrix)
## LINESTRING
linestring_matrix = rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2))
l <- st_linestring(linestring_matrix)

## Make POLYGON with list
polygon_list = list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5)))
pg <- st_polygon(polygon_list)
##> POLYGON ((1 5, 2 2, 4 1, 4 4, 1 5))

## Make POLYGON with a hole
polygon_border = rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5))
polygon_hole = rbind(c(2, 4), c(3, 4), c(3, 3), c(2, 3), c(2, 4))
polygon_with_hole_list = list(polygon_border, polygon_hole)
st_polygon(polygon_with_hole_list)
##> POLYGON ((1 5, 2 2, 4 1, 4 4, 1 5), (2 4, 3 4, 3 3, 2 3, 2 4))

## MULTILINESTRING
multilinestring_list = list(rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2)),
                            rbind(c(1, 2), c(2, 4)))
mls <- st_multilinestring((multilinestring_list))
                                        #> MULTILINESTRING ((1 5, 4 4, 4 1, 2 2, 3 2), (1 2, 2 4))
## MULTIPOLYGON
multipolygon_list = list(list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5))),
                         list(rbind(c(0, 2), c(1, 2), c(1, 3), c(0, 3), c(0, 2))))
mpg <- st_multipolygon(multipolygon_list)
                                        #> MULTIPOLYGON (((1 5, 2 2, 4 1, 4 4, 1 5)), ((0 2, 1 2, 1 3, 0 3, 0 2)))

## GEOMETRYCOLLECTION
gemetrycollection_list = list(st_multipoint(multipoint_matrix),
                              st_linestring(linestring_matrix))
gc <-st_geometrycollection(gemetrycollection_list)
                                        #> GEOMETRYCOLLECTION (MULTIPOINT (5 2, 1 3, 3 4, 3 2),
                                        #>   LINESTRING (1 5, 4 4, 4 1, 2 2, 3 2))

                                        #+end_src
** 2.2.7 simple feature columns ~sfc~
*** ~sfc~ POINT
#+begin_src R
  library(sf) #class and functions for vector data
  library(terra) #classes and functions for raster data
  library(dplyr)
  point1 = st_point(c(5, 2))
  point2 = st_point(c(1, 3))
  points_sfc = st_sfc(point1, point2)
  points_sfc                      # fsc
#+end_src
*** ~sfc~ POLYGON and MULTILINE
#+begin_src R
  polygon_list1 = list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5)))
  polygon1 = st_polygon(polygon_list1)
  polygon_list2 = list(rbind(c(0, 2), c(1, 2), c(1, 3), c(0, 3), c(0, 2)))
  polygon2 = st_polygon(polygon_list2)
  polygon_sfc = st_sfc(polygon1, polygon2)
  st_geometry_type(polygon_sfc)

  multilinestring_list1 = list(rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2)), 
                              rbind(c(1, 2), c(2, 4)))
  multilinestring1 = st_multilinestring((multilinestring_list1))
  multilinestring_list2 = list(rbind(c(2, 9), c(7, 9), c(5, 6), c(4, 7), c(2, 7)), 
                              rbind(c(1, 7), c(3, 8)))
  multilinestring2 = st_multilinestring((multilinestring_list2))
  multilinestring_sfc = st_sfc(multilinestring1, multilinestring2)
  st_geometry_type(multilinestring_sfc)
#+end_src
*** CRS
**** get
~sfc~ objects can additionally store information on the coordinate reference
systems (CRS). The default value is ~NA~ (Not Available), as can be verified with
~st_crs()~:
#+begin_src r
  st_crs(points_sfc)
  #> Coordinate Reference System: NA
#+end_src
All geometries in an sfc object must have the same CRS.
**** set
We can provide
1. Spatial Reference System Identifier (SRID, e.g., "EPSG:4326"),
2. well-known text (WKT2)
3. proj4string representation
#+begin_src R
points_sfc_wgs = st_sfc(point1, point2, crs = "EPSG:4326")
st_crs(points_sfc_wgs)
#+end_src
** 2.2.8 The ~sf~ class: the tibble
 #+begin_src R
lnd_point = st_point(c(0.1, 51.5))                 # sfg object
lnd_geom = st_sfc(lnd_point, crs = 4326)           # sfc object
lnd_attrib = data.frame(                           # data.frame object
  name = "London",
  temperature = 25,
  date = as.Date("2017-06-21")
  )
lnd_sf = st_sf(lnd_attrib, geometry = lnd_geom)    # sf object
#+end_src
** 3. Attributes Data 
*** 3.2 Get the underlying dataframe
#+begin_src R
  methods(class = "sf") # methods for sf objects, first 12 shown
  world_df = st_drop_geometry(world)
#+end_src
