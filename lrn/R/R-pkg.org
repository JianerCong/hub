* Data
** Weired behaviour when reading ";" delimited csv?
   There's an unsolved issue about reading ";"-delimited csv generated by Excel
   when the system number format is wrong. Try change the system number format
   through ~control panel~, then export the ","-delimited csv from Excel 
** ggplot
*** Styles
**** label x
Set the x value at x=2000 and x=4000 to "2k" and "4k"
#+begin_src R
p + scale_x_continuous(breaks = c(2000, 4000), labels = c("2k", "4k"))
#+end_src
*** xlim ylim
#+begin_src R
# Zoom into a specified area
ggplot(mtcars, aes(mpg, wt)) +
  geom_point() +
  xlim(15, 20)


# reverse scale
ggplot(mtcars, aes(mpg, wt)) +
  geom_point() +
  xlim(20, 15)


# with automatic lower limit
ggplot(mtcars, aes(mpg, wt)) +
  geom_point() +
  xlim(NA, 20)


# You can also supply limits that are larger than the data.
# This is useful if you want to match scales across different plots
small <- subset(mtcars, cyl == 4)
big <- subset(mtcars, cyl > 4)

ggplot(small, aes(mpg, wt, colour = factor(cyl))) +
  geom_point() +
  lims(colour = c("4", "6", "8"))


ggplot(big, aes(mpg, wt, colour = factor(cyl))) +
  geom_point() +
  lims(colour = c("4", "6", "8"))


# There are two ways of setting the axis limits: with limits or
# with coordinate systems. They work in two rather different ways.

last_month <- Sys.Date() - 0:59
df <- data.frame(
  date = last_month,
  price = c(rnorm(30, mean = 15), runif(30) + 0.2 * (1:30))
)

p <- ggplot(df, aes(date, price)) +
  geom_line() +
  stat_smooth()

p


# Setting the limits with the scale discards all data outside the range.
p + lims(x= c(Sys.Date() - 30, NA), y = c(10, 20))


# For changing x or y axis limits **without** dropping data
# observations use [coord_cartesian()]. Setting the limits on the
# coordinate system performs a visual zoom.
p + coord_cartesian(xlim =c(Sys.Date() - 30, NA), ylim = c(10, 20))



#+end_src
*** Legend
**** position
    #+begin_src R
    base <- ggplot(toy, aes(up, up)) + 
  geom_point(aes(colour = txt), size = 3) + 
  xlab(NULL) + 
  ylab(NULL)

base + theme(legend.position = "left")
base + theme(legend.position = "right") # the default 
base + theme(legend.position = "bottom")
base + theme(legend.position = "none")
#+end_src
**** further adjustment through theme(...)
legend.direction: layout of items in legends (“horizontal” or “vertical”).
legend.box: arrangement of multiple legends (“horizontal” or “vertical”).
legend.box.just: justification of each legend within the overall bounding box, when there are multiple legends (“top”, “bottom”, “left”, or “right”).
**** disable legend
    #+begin_src R
      erupt <- ggplot(faithfuld, aes(waiting, eruptions, fill = density)) +
        geom_raster() +
        scale_x_continuous(NULL, expand = c(0, 0)) + 
        scale_y_continuous(NULL, expand = c(0, 0)) + 
        theme(legend.position = "none")
      #+end_src

*** labels
**** of axis    
   #+begin_src R
   base <- ggplot(toy, aes(up, up)) + 
  geom_point(aes(colour = txt), size = 3) + 
  xlab("X") + 
  ylab("Y")

#+end_src
**** of legend..etc
#+begin_src R
ggplot(mpg, aes(displ, hwy)) + 
  geom_point(aes(colour = factor(cyl))) + 
  labs(
    x = "Engine displacement (litres)", 
    y = "Highway miles per gallon", 
    colour = "Number of cylinders",
    title = "Mileage by engine size and cylinders",
    subtitle = "Source: http://fueleconomy.gov"
  )
  #+end_src
*** color
**** See all colors
   #+begin_src R
RColorBrewer::display.brewer.all()
   #+end_src
*** Manually set colors
    Using the library munsell and color space
   #+begin_src R
                                             # munsell example
     erupt + scale_fill_gradient2(
               low = munsell::mnsl("5B 7/8"),
               high = munsell::mnsl("5Y 7/8"),
               mid = munsell::mnsl("N 7/0"),
               midpoint = .02
             ) 

                                             # colorspace examples
     erupt + scale_fill_gradientn(colours = colorspace::heat_hcl(7))
     erupt + scale_fill_gradientn(colours = colorspace::diverge_hcl(7))
#+end_src
*** library(colourspace)
#+begin_src R
  library(colorspace)

  ## See all palette
  hcl_palettes() #4 types
  ## Plot the pallates
  hcl_palettes("sequential (single-hue)", n = 7, plot = TRUE)
  hcl_palettes("qualitative", plot = TRUE)

  ## Check a specific palette
  hcl_palettes(palette = "Dark 2")
  hcl_palettes(palette = "dark2") #it's case-insensative and ignores space

  ## Construct colors
  ## set up actual colors
  c1 <- qualitative_hcl(4, h = c(0, 288), c = 50, l = 60) ## by hand
  c2 <- qualitative_hcl(4, palette = "dark2")             ## by name
  c3 <- qualitative_hcl(4, palette = "dark2", c = 80)     ## by name plus modification
 c4 <- sequential_hcl(4, palette = "viridis")

  ## The Hue, Chroma, Luminance plot
  p <- swatchplot(
    "Hue"       = sequential_hcl(5, h = c(0, 300), c = 60, l = 65),
    "Chroma"    = sequential_hcl(5, h = 0, c = c(100, 0), l = 65, rev = TRUE, power = 1),
    "Luminance" = sequential_hcl(5, h = 260, c = c(25, 25), l = c(25, 90), rev = TRUE, power = 1),
    off = 0
  )



  a <- sequential_hcl(
    2,
    h = 260,
    c = 80,
    l = c(30, 90))
  summary(a)
  print(a)

#+end_src
**** see the color wheels
     #+begin_src R
     ## convenience demo function
wheel <- function(col, radius = 1, ...)
  pie(rep(1, length(col)), col = col, radius = radius, ...) 

## compare base and colorspace palettes
## (in color and desaturated)

## Setup four grid
par(mar = rep(0, 4), mfrow = c(2, 2))
## rainbow color wheel

 wheel(rainbow_hcl(18))
 wheel(rainbow(18))
 wheel(desaturate(rainbow_hcl(12)))
 wheel(desaturate(rainbow(12)))


 #+end_src
*** annotations
#+begin_src R
  df <- data.frame(x = 1, y = 3:1, family = c("sans", "serif", "mono"))
  ggplot(df, aes(x, y)) +
    geom_text(aes(label = family, family = family))


  ggplot(df, aes(x, y)) +
    geom_text(aes(label = family, family = family),
              nudge_x = 20, nudge_y=40)

  ## adjustment
  df <- data.frame(
    x = c(1, 1, 2, 2, 1.5),
    y = c(1, 2, 1, 2, 1.5),
    text = c(
      "bottom-left", "bottom-right",
      "top-left", "top-right", "center"
    )
  )

  ggplot(df, aes(x, y)) +
    geom_text(aes(label = text))
  ggplot(df, aes(x, y)) +
    geom_text(aes(label = text), vjust = "inward", hjust = "inward")

  ## more hjust
  yrng <- range(economics$unemploy)
  xrng <- range(economics$date)
  caption <- paste(strwrap("Unemployment rates in the US have 
    varied a lot over the years", 40), collapse = "\n")

  ggplot(economics, aes(date, unemploy)) + 
    geom_line() + 
    geom_text(
      aes(x, y, label = caption), 
      data = data.frame(x = xrng[1], y = yrng[2], caption = caption), 
      hjust = 0, vjust = 1, size = 4
    )
  #+end_src
*** line width
   #+begin_src R
  ggplot(Oxboys, aes(age, height)) + 
  geom_line(aes(group = Subject)) + 
  geom_smooth(method = "lm", size = 2, se = FALSE)
#> `geom_smooth()` using formula 'y ~ x'
#+end_src
** purr
*** list comprehension
    #+begin_src R
      ## Apply function

      ## pass additional args
      map_dbl(df, mean, trim = 0.5)

      ## return int
      z <- list(x = 1:3, y = 4:5)
      map_int(z, length)

      ## return list
      models <- mtcars %>%
        split(.$cyl) %>%
        map(function(df) lm(mpg ~ wt, data = df))
      ## short cut for applying function
      models <- mtcars %>%
        split(.$cyl) %>%
        map(~lm(mpg ~ wt, data = .))


      ## extract the named component
      ## Method 1
      models %>%
        map(summary) %>%
        map_dbl(~.$r.squared)
      ## Method 2
      models %>%
        map(summary) %>%
        map_dbl("r.squared")
  #+end_src
** modelr
*** lm
#+begin_src R
library(tidyverse)
library(modelr)
df <- tibble(x = 2 + seq(10), y = x^2)
m <- model_matrix(df, y~poly(x,2))
mod <- lm(data=df,y~x)
## All same?
mod2 <- lm(data=df,y~poly(x,2))
mod3 <- lm(data=df,y~I(x^2))
mod4 <- lm(data=df,y~poly(x,2,raw=TRUE))

## Generate grid and add predictions
grid <- df %>% data_grid(x) %>%
  add_predictions(mod, var = "pred")

## Use c + c1x + c2x^2
grid2 <- df %>% data_grid(x) %>%
  spread_predictions(mod2,mod3,mod4)

p <- ggplot(df,aes(x))+
  geom_point(aes(y=y))+
  geom_line(aes(y=pred),
            data=grid,
            colour="green",
            size=1)+
  geom_line(aes(y=mod2), data=grid2, colour="blue", size=1)+
  geom_line(aes(y=mod3), data=grid2, colour="red", size=1)+
  geom_line(aes(y=mod4), data=grid2, colour="black", size=2)

  #+end_src
*** loess (polynomial regression fitting)
#+begin_src R
library(tidyverse)
library(modelr)
df <- tibble(x = 2 + seq(10), y = x^2)
m <- model_matrix(df, y~poly(x,2))
mod <- loess(data=df,y~x)
## All same?

## Generate grid and add predictions
grid <- df %>% data_grid(x) %>%
  add_predictions(mod, var = "pred")


p <- ggplot(df,aes(x))+
  geom_point(aes(y=y))+
  geom_line(aes(y=pred),
            data=grid,
            colour="green",
            size=1)

            #+end_src
*** fit model for each group using nested dataframe
   #+begin_src R
   library(tidyverse)
library(gapminder)
df <- gapminder
df <- df %>%
  group_by(country, continent) %>%
  nest()
(df$data[[1]])

mod <- function(df){
  lm(lifeExp ~ year, data=df)
}
## Store the model as a column
df <- df %>% mutate(model = map(data,mod))

## Play around
df %>%
  filter(continent == "Europe")
df %>%
  arrange(continent, country)

## Calculate residual
df <- df %>%
  mutate(
    resids = map2(data, model, add_residuals)
    ## List of all add_residuals(df,model)
  )

## unnest the dataframes stored in resids
df2 <- unnest(df,resids)

#+end_src
** tidyr
*** fill NA values
#+begin_src R
library(tidyverse)

df <- tribble(
  ~nam, ~x,~y,
  NA, 0, 0,
  "c1",1,2,
  "c2",2,3,
  NA,4,5,
  NA,6,6,
  "c3",4,4,
  "c4",5,5,
  NA,1,1
)

df1 <- df %>% fill(nam) #fill down
df2 <- df %>% fill(nam, .direction="up")
df3 <- df %>% fill(nam, .direction="updown") #up then down
df4 <- df %>% fill(nam, .direction="downup")

#+end_src
*** fill NA within a group
#+begin_src R
library(tidyverse)
                                        # Value (n_squirrels) is missing above and below within a group
squirrels <- tibble::tribble(
                       ~group,    ~name,     ~role,     ~n_squirrels,
                       1,      "Sam",    "Observer",   NA,
                       1,     "Mara", "Scorekeeper",    8,
                       1,    "Jesse",    "Observer",   NA,
                       1,      "Tom",    "Observer",   NA,
                       2,     "Mike",    "Observer",   NA,
                       2,  "Rachael",    "Observer",   NA,
                       2,  "Sydekea", "Scorekeeper",   14,
                       2, "Gabriela",    "Observer",   NA,
                       3,  "Derrick",    "Observer",   NA,
                       3,     "Kara", "Scorekeeper",    9,
                       3,    "Emily",    "Observer",   NA,
                       3, "Danielle",    "Observer",   NA
                     )

                                        # The values are inconsistently missing by position within the group
                                        # Use .direction = "downup" to fill missing values in both directions
df <- squirrels %>%
  dplyr::group_by(group) %>%
  fill(n_squirrels, .direction = "downup") %>%
  dplyr::ungroup()

  #+end_src
*** pivoting (wide to long)
#+begin_src R
  table4a
  #> # A tibble: 3 x 3
  #>   country     `1999` `2000`
  #> * <chr>        <int>  <int>
  #> 1 Afghanistan    745   2666
  #> 2 Brazil       37737  80488
  #> 3 China       212258 213766
  table4a %>% 
    pivot_longer(c(`1999`, `2000`), names_to = "year", values_to = "cases")
                                          #> # A tibble: 6 x 3
                                          #>   country     year   cases
                                          #>   <chr>       <chr>  <int>
                                          #> 1 Afghanistan 1999     745
                                          #> 2 Afghanistan 2000    2666
                                          #> 3 Brazil      1999   37737
                                          #> 4 Brazil      2000   80488
                                          #> 5 China       1999  212258
                                          #> 6 China       2000  213766

#+end_src
** joins
*** basic
#+begin_src R
x <- tribble(
  ~key, ~val_x,
     1, "x1",
     2, "x2",
     2, "x3",
     1, "x4"
)
y <- tribble(
  ~key, ~val_y,
     1, "y1",
     2, "y2"
)
left_join(x, y, by = "key")
#> # A tibble: 4 x 3
#>     key val_x val_y
#>   <dbl> <chr> <chr>
#> 1     1 x1    y1   
#> 2     2 x2    y2   
#> 3     2 x3    y2   
#> 4     1 x4    y1
#+end_src
*** defining the key columns
#+begin_src R
  flights2 %>%
    left_join(airports, c("dest" = "faa"))

  flights2 %>%
    left_join(airports, c("origin" = "faa"))
  #+end_src
** dplyr
*** rename columns
#+begin_src R
iris <- as_tibble(iris) # so it prints a little nicer
rename(iris, petal_length = Petal.Length)
#> # A tibble: 150 x 5
#>    Sepal.Length Sepal.Width petal_length Petal.Width Species
#>           <dbl>       <dbl>        <dbl>       <dbl> <fct>  
#>  1          5.1         3.5          1.4         0.2 setosa 
#>  2          4.9         3            1.4         0.2 setosa 
#>  3          4.7         3.2          1.3         0.2 setosa 
#>  4          4.6         3.1          1.5         0.2 setosa 
#>  5          5           3.6          1.4         0.2 setosa 
#>  6          5.4         3.9          1.7         0.4 setosa 
#>  7          4.6         3.4          1.4         0.3 setosa 
#>  8          5           3.4          1.5         0.2 setosa 
#>  9          4.4         2.9          1.4         0.2 setosa 
#> 10          4.9         3.1          1.5         0.1 setosa 
#> # … with 140 more rows

rename_with(iris, toupper)
#> # A tibble: 150 x 5
#>    SEPAL.LENGTH SEPAL.WIDTH PETAL.LENGTH PETAL.WIDTH SPECIES
#>           <dbl>       <dbl>        <dbl>       <dbl> <fct>  
#>  1          5.1         3.5          1.4         0.2 setosa 
#>  2          4.9         3            1.4         0.2 setosa 
#>  3          4.7         3.2          1.3         0.2 setosa 
#>  4          4.6         3.1          1.5         0.2 setosa 
#>  5          5           3.6          1.4         0.2 setosa 
#>  6          5.4         3.9          1.7         0.4 setosa 
#>  7          4.6         3.4          1.4         0.3 setosa 
#>  8          5           3.4          1.5         0.2 setosa 
#>  9          4.4         2.9          1.4         0.2 setosa 
#> 10          4.9         3.1          1.5         0.1 setosa 
#> # … with 140 more rows
rename_with(iris, toupper, starts_with("Petal"))
#> # A tibble: 150 x 5
#>    Sepal.Length Sepal.Width PETAL.LENGTH PETAL.WIDTH Species
#>           <dbl>       <dbl>        <dbl>       <dbl> <fct>  
#>  1          5.1         3.5          1.4         0.2 setosa 
#>  2          4.9         3            1.4         0.2 setosa 
#>  3          4.7         3.2          1.3         0.2 setosa 
#>  4          4.6         3.1          1.5         0.2 setosa 
#>  5          5           3.6          1.4         0.2 setosa 
#>  6          5.4         3.9          1.7         0.4 setosa 
#>  7          4.6         3.4          1.4         0.3 setosa 
#>  8          5           3.4          1.5         0.2 setosa 
#>  9          4.4         2.9          1.4         0.2 setosa 
#> 10          4.9         3.1          1.5         0.1 setosa 
#> # … with 140 more rows
rename_with(iris, ~ tolower(gsub(".", "_", .x, fixed = TRUE)))
#> # A tibble: 150 x 5
#>    sepal_length sepal_width petal_length petal_width species
#>           <dbl>       <dbl>        <dbl>       <dbl> <fct>  
#>  1          5.1         3.5          1.4         0.2 setosa 
#>  2          4.9         3            1.4         0.2 setosa 
#>  3          4.7         3.2          1.3         0.2 setosa 
#>  4          4.6         3.1          1.5         0.2 setosa 
#>  5          5           3.6          1.4         0.2 setosa 
#>  6          5.4         3.9          1.7         0.4 setosa 
#>  7          4.6         3.4          1.4         0.3 setosa 
#>  8          5           3.4          1.5         0.2 setosa 
#>  9          4.4         2.9          1.4         0.2 setosa 
#> 10          4.9         3.1          1.5         0.1 setosa 
#> # … with 140 more rows

#+end_src
*** pass string to dplyr
#+begin_src R
library(dplyr)

df = data.frame(
  X1 = LETTERS[1:5], 
  X2 = c("apple", "apple", "apple", "banana", "banana"),
  X3 = c("apple", "banana", "apple", "banana", "apple"), 
  stringsAsFactors=FALSE
)

column_string = "X2"
column_value = "banana"
column_name <- rlang::sym(column_string)

filtered_df <- df %>%
  filter(UQ(column_name) == UQ(column_value))

filtered_df

#+end_src
*** filter
**** basic
   #+begin_src R
     filter(flights, month == 1, day == 1)
     ## Get and print the results
     (dec25 <- filter(flights, month == 12, day == 25))


   #+end_src
**** %in%
     #+begin_src R
filter(flights, !(arr_delay > 120 | dep_delay > 120))
filter(flights, arr_delay <= 120, dep_delay <= 120)
     #+end_src
**** NA and or
    #+begin_src R
    df <- tibble(x = c(1, NA, 3))
filter(df, x > 1)
#> # A tibble: 1 x 1
#>       x
#>   <dbl>
#> 1     3
filter(df, is.na(x) | x > 1)
#> # A tibble: 2 x 1
#>       x
#>   <dbl>
#> 1    NA
#> 2     3
#+end_src
*** group and summary
**** summarise
#+begin_src R
summarise(flights, delay = mean(dep_delay, na.rm = TRUE))
#> # A tibble: 1 x 1
#>   delay
#>   <dbl>
#> 1  12.6
#+end_src
**** group and summarise
#+begin_src R
by_day <- group_by(flights, year, month, day)
summarise(by_day, delay = mean(dep_delay, na.rm = TRUE))
#> `summarise()` regrouping output by 'year', 'month' (override with `.groups` argument)
#> # A tibble: 365 x 4
#> # Groups:   year, month [12]
#>    year month   day delay
#>   <int> <int> <int> <dbl>
#> 1  2013     1     1 11.5 
#> 2  2013     1     2 13.9 
#> 3  2013     1     3 11.0 
#> 4  2013     1     4  8.95
#> 5  2013     1     5  5.73
#> 6  2013     1     6  7.15
#> # … with 359 more rows
#+end_src
**** in pipe
#+begin_src R
delays <- flights %>% 
  group_by(dest) %>% 
  summarise(
    count = n(),
    dist = mean(distance, na.rm = TRUE),
    delay = mean(arr_delay, na.rm = TRUE)
  ) %>% 
  filter(count > 20, dest != "HNL")
#> `summarise()` ungrouping output (override with `.groups` argument)
#+end_src
**** missing values
What happens if we don’t set na.rm = TRUE?
#+begin_src R
flights %>% 
  group_by(year, month, day) %>% 
  summarise(mean = mean(dep_delay))
#> `summarise()` regrouping output by 'year', 'month' (override with `.groups` argument)
#> # A tibble: 365 x 4
#> # Groups:   year, month [12]
#>    year month   day  mean
#>   <int> <int> <int> <dbl>
#> 1  2013     1     1    NA
#> 2  2013     1     2    NA
#> 3  2013     1     3    NA
#> 4  2013     1     4    NA
#> 5  2013     1     5    NA
#> 6  2013     1     6    NA
#> # … with 359 more rows
#+end_src
**** count
#+begin_src R
delays <- not_cancelled %>% 
  group_by(tailnum) %>% 
  summarise(
    delay = mean(arr_delay, na.rm = TRUE),
    n = n()
  )
#> `summarise()` ungrouping output (override with `.groups` argument)

ggplot(data = delays, mapping = aes(x = n, y = delay)) + 
  geom_point(alpha = 1/10)
  #+end_src
**** useful summarise functions
***** mean and filtered mean, median
#+begin_src R
not_cancelled %>% 
  group_by(year, month, day) %>% 
  summarise(
    avg_delay1 = mean(arr_delay),
    avg_delay2 = mean(arr_delay[arr_delay > 0]) # the average positive delay
  )
#> `summarise()` regrouping output by 'year', 'month' (override with `.groups` argument)
#> # A tibble: 365 x 5
#> # Groups:   year, month [12]
#>    year month   day avg_delay1 avg_delay2
#>   <int> <int> <int>      <dbl>      <dbl>
#> 1  2013     1     1      12.7        32.5
#> 2  2013     1     2      12.7        32.0
#> 3  2013     1     3       5.73       27.7
#> 4  2013     1     4      -1.93       28.3
#> 5  2013     1     5      -1.53       22.6
#> 6  2013     1     6       4.24       24.4
#> # … with 359 more rows
#+end_src
***** measure of spread: sd (standard deviation), IQR(inter quartile range)
The interquartile range IQR(x) and median absolute deviation mad(x) are robust
equivalents that may be more useful if you have outliers.
#+begin_src R
# Why is distance to some destinations more variable than to others?
not_cancelled %>% 
  group_by(dest) %>% 
  summarise(distance_sd = sd(distance)) %>% 
  arrange(desc(distance_sd))
#> `summarise()` ungrouping output (override with `.groups` argument)
#> # A tibble: 104 x 2
#>   dest  distance_sd
#>   <chr>       <dbl>
#> 1 EGE         10.5 
#> 2 SAN         10.4 
#> 3 SFO         10.2 
#> 4 HNL         10.0 
#> 5 SEA          9.98
#> 6 LAS          9.91
#> # … with 98 more rows
#+end_src
***** measure of rank: max, min
Measures of rank: min(x), quantile(x, 0.25), max(x). Quantiles are a
generalisation of the median. For example, quantile(x, 0.25) will find a value
of x that is greater than 25% of the values, and less than the remaining 75%.
#+begin_src R
# When do the first and last flights leave each day?
not_cancelled %>% 
  group_by(year, month, day) %>% 
  summarise(
    first = min(dep_time),
    last = max(dep_time)
  )
#> `summarise()` regrouping output by 'year', 'month' (override with `.groups` argument)
#> # A tibble: 365 x 5
#> # Groups:   year, month [12]
#>    year month   day first  last
#>   <int> <int> <int> <int> <int>
#> 1  2013     1     1   517  2356
#> 2  2013     1     2    42  2354
#> 3  2013     1     3    32  2349
#> 4  2013     1     4    25  2358
#> 5  2013     1     5    14  2357
#> 6  2013     1     6    16  2355
#> # … with 359 more rows
#+end_src
***** Measures of position: first(x), nth(x, 2), last(x).
These work similarly to ~x[1]~, ~x[2]~, and ~x[length(x)]~ but let you set a
default value if that position does not exist (i.e. you’re trying to get the 3rd
element from a group that only has two elements).

For example, we can find the first and last departure for each day:
#+begin_src R
not_cancelled %>% 
  group_by(year, month, day) %>% 
  summarise(
    first_dep = first(dep_time), 
    last_dep = last(dep_time)
  )
#> `summarise()` regrouping output by 'year', 'month' (override with `.groups` argument)
#> # A tibble: 365 x 5
#> # Groups:   year, month [12]
#>    year month   day first_dep last_dep
#>   <int> <int> <int>     <int>    <int>
#> 1  2013     1     1       517     2356
#> 2  2013     1     2        42     2354
#> 3  2013     1     3        32     2349
#> 4  2013     1     4        25     2358
#> 5  2013     1     5        14     2357
#> 6  2013     1     6        16     2355
#> # … with 359 more rows
#+end_src
These functions are complementary to filtering on ranks. Filtering gives you all
variables, with each observation in a separate row:
***** count
You’ve seen ~n()~, which takes no arguments, and returns the size of the current
group. To count the number of non-missing values, use ~sum(!is.na(x))~. To count
the number of distinct (unique) values, use ~n_distinct(x)~.
#+begin_src R
# Which destinations have the most carriers?
not_cancelled %>% 
  group_by(dest) %>% 
  summarise(carriers = n_distinct(carrier)) %>% 
  arrange(desc(carriers))
#> `summarise()` ungrouping output (override with `.groups` argument)
#> # A tibble: 104 x 2
#>   dest  carriers
#>   <chr>    <int>
#> 1 ATL          7
#> 2 BOS          7
#> 3 CLT          7
#> 4 ORD          7
#> 5 TPA          7
#> 6 AUS          6
#> # … with 98 more rows
#+end_src
****** the count verb
Counts are so useful that dplyr provides a simple helper if all you want is a
count:
#+begin_src R
not_cancelled %>% 
  count(dest)
#+end_src
You can optionally provide a weight variable. For example, you could use this to
“count” (sum) the total number of miles a plane flew:
#+begin_src R
not_cancelled %>% 
  count(tailnum, wt = distance)
  #+end_src
****** use sum and mean to count
#+begin_src R
  ## How many flights left before 5am? (these usually indicate delayed
  ## flights from the previous day)
  not_cancelled %>% 
    group_by(year, month, day) %>% 
    summarise(n_early = sum(dep_time < 500))

  ## What proportion of flights are delayed by more than an hour?
  not_cancelled %>% 
    group_by(year, month, day) %>% 
    summarise(hour_prop = mean(arr_delay > 60))
  #+end_src
**** grouping by multiple values and peeling off groupings
When you group by multiple variables, each summary peels off one level of the
grouping. That makes it easy to progressively roll up a dataset:
#+begin_src R
daily <- group_by(flights, year, month, day)
(per_day   <- summarise(daily, flights = n()))
#> `summarise()` regrouping output by 'year', 'month' (override with `.groups` argument)
#> # A tibble: 365 x 4
#> # Groups:   year, month [12]
#>    year month   day flights
#>   <int> <int> <int>   <int>
#> 1  2013     1     1     842
#> 2  2013     1     2     943
#> 3  2013     1     3     914
#> 4  2013     1     4     915
#> 5  2013     1     5     720
#> 6  2013     1     6     832
#> # … with 359 more rows
(per_month <- summarise(per_day, flights = sum(flights)))
#> `summarise()` regrouping output by 'year' (override with `.groups` argument)
#> # A tibble: 12 x 3
#> # Groups:   year [1]
#>    year month flights
#>   <int> <int>   <int>
#> 1  2013     1   27004
#> 2  2013     2   24951
#> 3  2013     3   28834
#> 4  2013     4   28330
#> 5  2013     5   28796
#> 6  2013     6   28243
#> # … with 6 more rows
(per_year  <- summarise(per_month, flights = sum(flights)))
#> `summarise()` ungrouping output (override with `.groups` argument)
#> # A tibble: 1 x 2
#>    year flights
#>   <int>   <int>
#> 1  2013  336776
#+end_src
**** ungroup
#+begin_src R
daily %>% 
  ungroup() %>%             # no longer grouped by date
  summarise(flights = n())  # all flights
#> # A tibble: 1 x 1
#>   flights
#>     <int>
#> 1  336776
#+end_src
** string
*** subsetting string
#+begin_src R
x <- c("Apple", "Banana", "Pear")
str_sub(x, 1, 3)
#> [1] "App" "Ban" "Pea"
# negative numbers count backwards from end
str_sub(x, -3, -1)
#> [1] "ple" "ana" "ear"
#+end_src
Note that str_sub() won’t fail if the string is too short: it will just return
as much as possible:
#+begin_src R
str_sub("a", 1, 5)
#> [1] "a"
#+end_src
You can also use the assignment form of str_sub() to modify strings:
#+begin_src R
str_sub(x, 1, 1) <- str_to_lower(str_sub(x, 1, 1))
x
#> [1] "apple"  "banana" "pear"
#+end_src
* pkg
** assertthat
*** basic
#+begin_src R
x <- 1:10
stopifnot(is.character(x))
# Error: is.character(x) is not TRUE

assert_that(is.character(x))
# Error: x is not a character vector

assert_that(length(x) == 5)
# Error: length(x) not equal to 5

assert_that(is.numeric(x))
# [1] TRUE
#+end_src
*** The 3 bro: ~assert_that~, ~see_if~ and ~validate_that~

There are two main functions in assertthat:

    assert_that() signal an error

    see_if() returns a logical value, with the error message as an attribute.

    validate_that() returns TRUE on success, otherwise returns the error as a string.

You'll use assert_that() in your own code, but you'll mostly see see_if() in the
examples (because R CMD check requires that examples run without errors). Use
validate_that() for S4 validate methods.
*** write your own assert
#+begin_src R
  is_odd <- function(x) {
    assert_that(is.numeric(x), length(x) == 1)
    x %% 2 == 1
  }
  assert_that(is_odd(2))
                                          # Error: is_odd(x = 2) is not TRUE

  on_failure(is_odd) <- function(call, env) {
    paste0(deparse(call$x), " is even")
  }
  assert_that(is_odd(2))
                                          # Error: 2 is even
  assert_that(is_odd("b"))
                                          # Error: x is not a numeric or integer vector
  assert_that(is_odd(1:2))
                                          # Error: length(x) not equal to 1
#+end_src
** cli
*** Short alert message
#+begin_src R
  pkgs <- c("foo", "bar", "foobar")
  cli_alert_success("Downloaded {length(pkgs)} packages.")
  db_url <- "example.com:port"
  cli_alert_info("Reopened database {.url {db_url}}.")
  cli_alert_warning("Cannot reach GitHub, using local database cache.")
  cli_alert_danger("Failed to connect to database.")
  cli_alert("A generic alert")
#+end_src
*** Headings
#+begin_src R
  cli_h1("Heading 1")
  cli_h2("Heading 2")
  cli_h3("Heading 3")

#+end_src
*** Lists
#+begin_src R
fun <- function() {
  cli_ol()
  cli_li("Item 1")
  ulid <- cli_ul()
  cli_li("Subitem 1")
  cli_li("Subitem 2")
  cli_end(ulid)
  cli_li("Item 2")
  cli_end()
}
fun()
#+end_src
*** Themes
#+begin_src R
fun <- function() {
  cli_div(theme = list(span.emph = list(color = "orange")))
  cli_text("This is very {.emph important}")
  cli_end()
  cli_text("Back to the {.emph previous theme}")
}
fun()
#+end_src
*** Command substitution
#+begin_src R
size <- 123143123
dt <- 1.3454
cli_alert_info(c(
  "Downloaded {prettyunits::pretty_bytes(size)} in ",
  "{prettyunits::pretty_sec(dt)}"))
  #+end_src
*** Pluralization
#+begin_src R
nfiles <- 3
ndirs <- 1
cli_alert_info("Found {nfiles} file{?s} and {ndirs} director{?y/ies}.")
#+end_src
*** Progress bar
#+begin_src R
clean <- function() {
  cli_progress_bar("Cleaning data", total = 100)
  for (i in 1:100) {
    Sys.sleep(5/100)
    cli_progress_update()
  }
}
clean()
#+end_src
** yaml
#+begin_src R
  install.packages('yaml')
  read_yaml('m.yaml')
  #+end_src
* Final
# Local Variables:
# org-what-lang-is-for: "R"
# End:
