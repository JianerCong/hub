* pkg
** assertthat
*** basic
#+begin_src R
x <- 1:10
stopifnot(is.character(x))
# Error: is.character(x) is not TRUE

assert_that(is.character(x))
# Error: x is not a character vector

assert_that(length(x) == 5)
# Error: length(x) not equal to 5

assert_that(is.numeric(x))
# [1] TRUE
#+end_src
*** The 3 bro: ~assert_that~, ~see_if~ and ~validate_that~

There are two main functions in assertthat:

    assert_that() signal an error

    see_if() returns a logical value, with the error message as an attribute.

    validate_that() returns TRUE on success, otherwise returns the error as a string.

You'll use assert_that() in your own code, but you'll mostly see see_if() in the
examples (because R CMD check requires that examples run without errors). Use
validate_that() for S4 validate methods.
*** write your own assert
#+begin_src R
  is_odd <- function(x) {
    assert_that(is.numeric(x), length(x) == 1)
    x %% 2 == 1
  }
  assert_that(is_odd(2))
                                          # Error: is_odd(x = 2) is not TRUE

  on_failure(is_odd) <- function(call, env) {
    paste0(deparse(call$x), " is even")
  }
  assert_that(is_odd(2))
                                          # Error: 2 is even
  assert_that(is_odd("b"))
                                          # Error: x is not a numeric or integer vector
  assert_that(is_odd(1:2))
                                          # Error: length(x) not equal to 1
#+end_src
** cli
*** Short alert message
#+begin_src R
  pkgs <- c("foo", "bar", "foobar")
  cli_alert_success("Downloaded {length(pkgs)} packages.")
  db_url <- "example.com:port"
  cli_alert_info("Reopened database {.url {db_url}}.")
  cli_alert_warning("Cannot reach GitHub, using local database cache.")
  cli_alert_danger("Failed to connect to database.")
  cli_alert("A generic alert")
#+end_src
*** Headings
#+begin_src R
  cli_h1("Heading 1")
  cli_h2("Heading 2")
  cli_h3("Heading 3")

#+end_src
*** Lists
#+begin_src R
fun <- function() {
  cli_ol()
  cli_li("Item 1")
  ulid <- cli_ul()
  cli_li("Subitem 1")
  cli_li("Subitem 2")
  cli_end(ulid)
  cli_li("Item 2")
  cli_end()
}
fun()
#+end_src
*** Themes
#+begin_src R
fun <- function() {
  cli_div(theme = list(span.emph = list(color = "orange")))
  cli_text("This is very {.emph important}")
  cli_end()
  cli_text("Back to the {.emph previous theme}")
}
fun()
#+end_src
*** Command substitution
#+begin_src R
size <- 123143123
dt <- 1.3454
cli_alert_info(c(
  "Downloaded {prettyunits::pretty_bytes(size)} in ",
  "{prettyunits::pretty_sec(dt)}"))
  #+end_src
*** Pluralization
#+begin_src R
nfiles <- 3
ndirs <- 1
cli_alert_info("Found {nfiles} file{?s} and {ndirs} director{?y/ies}.")
#+end_src
*** Progress bar
#+begin_src R
clean <- function() {
  cli_progress_bar("Cleaning data", total = 100)
  for (i in 1:100) {
    Sys.sleep(5/100)
    cli_progress_update()
  }
}
clean()
#+end_src
** yaml
#+begin_src R
  install.packages('yaml')
  read_yaml('m.yaml')
  #+end_src
** brew
Q:  In readLines(icon, 1) : incomplete final line found on 'template-longtblr.tex'

A: Add a \n at the end of the file.
* Final
# Local Variables:
# org-what-lang-is-for: "R"
# End:
