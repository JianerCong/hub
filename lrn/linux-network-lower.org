** Lower
*** cable connect two linux
On machine 1:

Wired setting :
ipv4 address = 10.0.0.1
mask = 255.255.255.0
router = ""

On machine 2:

Wired setting :
ipv4 address = 10.0.0.2
mask = 255.255.255.0
router = ""

Now ping each other
https://askubuntu.com/questions/22835/how-to-network-two-ubuntu-computers-using-ethernet-without-a-router?noredirect=1&lq=1
*** bridge
**** create and bridge
#+begin_src bash

  # create a bridge named my_bridge
  b=my_bridge
  ip link add $b type bridge

  # show the bridge
  ip -d link show $b
  ip -j -p -d link show $b        # see the bridge in JSON
  # -j, -json
  # -p, -pretty
  # -d, -details

  #  ü¶ú : The above will now just show a bunch of info about the newly created
  #  bridge. But a bridge is useless if it can't "bridge" anything. So let's
  #  actually bridge two interfaces together.

  iface1=veth0
  iface2=tap0
  ip link set $iface1 master $b
  ip link set $iface2 master $b
#+end_src

**** Spanning Tree Protocol

üê¢ : When a network interface receives a packet that is
not on its subnet, it pass the packet to all the
neighbors (the interfaces that are bridged to it).
And its neighbors will do the same...

ü¶ú : Wait, then how do we ensure that there's no
loop?

üê¢ : That's when Spanning Tree Protocol STP comes
in. 

*** ? My exe can't bound to port?
turn off your network proxy
*** listening port
#+begin_src bash
  sudo lsof -i -P -n | grep LISTEN
  sudo ss -tulpn | grep LISTEN
  sudo ss -tlp
  # ss: socket analysis
  # -t: display TCP ,-u: display UDP, -l: only listening sockets
  # -p: show processes using socket, 
  # -n: numeric Do not try to resolve service names. Show exact bandwidth values.
#+end_src
*** see all connections
#+begin_src bash
  sudo netstat -tupn              # to outside world
  netstat                        # see all 
#+end_src
*** the ip-address
  #+BEGIN_SRC bash
    ip address show
    # briefly show the interfaces
    ip -br a
    ip -brief a
    # show in json (pretty)
    ip -br -j -p a
  #+END_SRC
  Among many out-put we see that 192.168.1.12 is our ipv4 address.
  #+BEGIN_SRC 
  3: enx000ec6b5dbf8: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000
      link/ether 00:0e:c6:b5:db:f8 brd ff:ff:ff:ff:ff:ff
      inet 192.168.1.12/24 brd 192.168.1.255 scope global noprefixroute enx000ec6b5dbf8
         valid_lft forever preferred_lft forever

  #+END_SRC
*** Subnet
  _Classless Inter-Domain Routing (CIDR)_ : where a subnet such as
  10.23.2.0/255.255.255.0 is written as 10.23.2.0/24.
*** Who is my router?
     #+BEGIN_SRC bash
  ip route show
     #+END_SRC

     Each line is a _routing rule_. The second line says the directly reachable
     local subnet(all hosts within 169.254.0.0/16 can be reached dirrectly). 

  The first line, says where we go to if the address is not listed below, in which
  case, is our router.

  #+BEGIN_SRC bash
  default via 192.168.1.1 dev enx000ec6b5dbf8 proto dhcp metric 100 
  169.254.0.0/16 dev enx000ec6b5dbf8 scope link metric 1000 
  192.168.1.0/24 dev enx000ec6b5dbf8 proto kernel scope link src 192.168.1.12 metric 100
  #+END_SRC
*** ipv6
  Each host has at least two ipv6 address: 
       _global unicast address_
       _the link local address(for local network)_

  Link-local addresses always have an fe80::/10 prefix, followed by an all-zero
  54-bit network ID, and end with a 64-bit interface ID. The result is that ~a
  link-local address will be in the fe80::/64 subnet~.

  Glocal unicast addresses have prefixes 2000::/3. Because the first byte starts
  with 001 with this prefix, that byte can be completed as 0010 or 0011. As a
  result, ~a global unicast address always starts with 2 or 3~.
**** view
  ip -6 address show
  ip -6 route show
*** Tools
  ICMP: Internet Control Message Protoco -- the debugging protoco that dosen't
  carry any user info. A transport layer protoco that dosn;t have application
  layers build on it.

  _DNS_: the Domain Name System -- Application layer protoco that maps names to
  ip-address.
**** ping
  Send an ICMP echo request packets to a host.
**** host
  #+BEGIN_SRC bash
  host www.example.com
  host -6 www.example.com
  host -4 www.example.com
  #+END_SRC
*** Ethernet network
  Each host in an ethernet network has a _Media Access Control(MAC)_ address. The
  frame sent over an ethernet network contains the From- and To- MAC address.

  The router can unpack the frame and re-package the data, and send that to other
  ethernet network, which is exactly what internet does.
*** linux as router
ü¶ú : Am I forwarding ?

sysctl net.ipv4.ip_forward

ü¶ú : turn on forwarding

sudo sysctl -w net.ipv4.ip_forward=1
*** DNS
  1. app calls a function to look up the ip addr behind an host name. The function
     is usually in sys shared lib.
  2. the func runs according to the rules in /etc/nsswitch.conf. (Check the
     overrides in /etc/hosts)
  3. Otherwise, send DNS request to a DNS server
**** How to add DNS entries manually 
      Change
  ~Usually LAN hosts are in /etc/hosts~
 or ~C:\Windows\System32\drivers\etc\hosts~
  #+BEGIN_SRC bash
    cat /etc/resolv.conf            # straight-forward name lookup
    cat /etc/nsswitch.conf         
  #+END_SRC
  In /etc/nsswitch.conf, we see that after hosts: there are "files" before DNS.
  This means we look up /etc/hosts before we call the dns. 
  ~Usually LAN hosts are in /etc/hosts~

**** DNS cache
  I am runing DNS cache if I can find 127.0.0.53 or 127.0.0.1 in /etc/resolv.conf
**** zero-configuration name service
  The main idea of 0-conf (e.g. Link-Local Multicast Name Resolution(LLMNR)  & Multi-cast
  DNS (mDNS)) : seperate DNS for LAN name look-up. 

  When ask for a host on LAN, we usually boardcast the request instead of resort
  to the DNS server.
  #+BEGIN_SRC bash
    resolvectl status               # check current DNS setting
  #+END_SRC
*** local host
  lo: ::1 (v6) or 127.0.0.1 is your own machine
*** Transport layer (Transmission Control Pro, User Datagram Pro)
  transport layer bridge between the gap between the raw packets and your app.
**** TCP
  TCP allows for multiple apps by means of _ports_. (like a mailbox number of a
  building).

  TCP opens a ~connection~. E.g. a browser opens a conn between port
  localhost:36404 and the remote-host:80
  #+BEGIN_SRC bash
    netstat -nt                      # watch tcp conn(without DNS)
    netstat -nt6
    cat /etc/services               # see well-known services
  #+END_SRC

  Dynamically assigned ports <=> ephemeral port. Local well-done ports are usually
  initiated by remote host. This means you have listening server on your host.
  #+BEGIN_SRC bash
    netstat -ntl                    # show listening ports
  #+END_SRC

  Only super-user can listen to ports 0 to 1024.
**** UDP
  1. No datastream, just single messages.
  2. No auto-reordering and auto-correction(but it does have checksum).
   
  TCP is like telephone, while UDP is like messages.
***** Example of UDP
  1. Network Time Protocol (NTP) : Send quick messages to get time
  2. Video chat.

*** Dynamically Host Configuration Protocol (DHCP)
  The default way to get:
  1. ip addr (ask for a ~lease~, which can be renewed)
  2. subnet mask
  3. default gateway
  4. DNS server
  Each local network has a DHCP server, which usually is the router.

  How to manually boardcast to find dhcp server.(Note: you should remove the
  default route before doing so.) This command let your computer to shout to the
  physical network: "Is there a DHCP server? please configure me üê∏"
  #+BEGIN_SRC bash
  sudo dhclient enp0s31f6
  #+END_SRC

*** Auto-v6 config
  ipv6 also has DHCP called DHCPv6. But, more often we use ~stateless config~
  which is ~decentralized~ the host ~does not~ need to store any info such as the
  the lease info.

**** How it works
  1. The host self-generate a link-local address: on the fe80::/64. It can
     boardcast this subnet to check that the address is unique in LAN.
  2. Next, it start listening for a Router Advertising (RA) messages, which the
     router will send to LAN occasionally.
     This message contains: the global network prefix + the router's address +
     additional info.
  3. Finally, the host can fill-out the interface-part of the address.

*** Linux as a router [enable network formarding]
 #+begin_src bash
 #! /bin/bash
 ip route show
 # Enable simple routing
 sudo sysctl -w net.ipv4.ip_forward=1
 # Check
 sysctl net.ipv4.ip_forward

 # How to enable these upon boot
 cat /etc/sysctl.conf
 cat /etc/sysctl.d

 #+end_src

*** Trace the route
#+begin_src bash
  tracepath -b  39.156.66.10
#+end_src
*** The ipv4 private address space
 + 10.0.0.0/8
 + 192.168.0.0/16
 + 172.16.0.0/12
*** The link-local and global-unicast ipv6
 + link-local: fe80::/10
 + global-unicast: 2000::/3
*** neibour over the network
#+begin_src bash
# Who are my known neibor
ip -4 neigh
#+end_src
*** Wireless
**** SSID
Service Set ID = Network Name
**** Scan for wifi
#+begin_src bash
  sudo apt install net-tools
  # enable the network interface
  sudo ifconfig  wlo1 up
  # scan for wifi
  sudo iw dev wlo1 scan | less
  # View the current wifi
  iw dev wlo1 link

  # more
  cat /etc/wpa_supplicant.conf

 #+end_src

** Kernal
  Network interfaces usually have names that indicate the kind of hardware
  underneath, such as enp0s31f6 (an interface in a PCI slot). A name like this is
  called a predictable network interface device name, because it remains the same
  after a reboot. At boot time, interfaces have traditional names such as eth0
  (the first Ethernet card in the computer) and wlan0 (a wireless interface), but
  on most machines running systemd, they are quickly renamed
*** network interface
  After running _ip address show_,we get in our example, three network interface:
  #+BEGIN_SRC 
  1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
  ...
  2: wlo1: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default qlen 1000
  ...
  3: enx000ec6b5dbf8: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000
      link/ether 00:0e:c6:b5:db:f8 brd ff:ff:ff:ff:ff:ff
  ...
  #+END_SRC

  üê¢ : Each interface gets a number. Interface 1
  is almost always loopback. The flag ~UP~ means
  it's working.

  ü¶ú : Oh. So an interface can be turned off ?

  üê¢ : Yes. For example, the ~docker0~ interface
  is turned down when docker is not running.

  The number after _link/ether_ is the mac address(00:0E:C6:B5:DB:F8).
*** 4 steps to make a linux connected 
  1. Connect the network hardware and ensure that the kernel has a driver for it.
  If the driver is present, ip address show includes an entry for the device,
  even if it hasn‚Äôt been configured(kernel dose this for you)

  2. Perform any additional physical layer setup, such as choosing a network
  name or password.(Usually not needed)

  3. Assign IP address(es) and subnets to the kernel network interface so that
  the kernel‚Äôs device drivers (physical layer) and internet subsystems 
  internet layer) can talk to each other. (üê¢ :
  you can do this in the Network > Wired Setting on
  the Ubuntu Desktop to configure this)

  4. Add any additional necessary routes, including the default gateway.

*** Add ip address manually
  üê¢  : the following is usually dangerous and the
  recommended way is to use a tool like Netplan to
  build the configuration file. 
  #+BEGIN_SRC bash
  ip address add 102.233.222/24 dev enp0s31f6
  man ip-address
  #+END_SRC
*** Add default routes
      Add the host at <gw-addr> as a default gateway. the <gw-addr> must be in a
      locally connected subnet.

  #+BEGIN_SRC bash
  ip route add default via <gw-addr> dev <interface>
  ip route del default
  #+END_SRC

**** Example
  Connect to subnet 192.168.45.0/24 through the reachable host at 10.23.2.14
  #+BEGIN_SRC bash
  ip route add 192.168.45.0/24 via 10.23.2.14
  ip route del 192.168.45.0 #when you are done.
  #+END_SRC
*** Boot-time setup
  Different distro manages network differently. 

  See /etc/netplan folder which
  contains the yaml files that configures the network.
*** Challenges 
  1. Most machines do not have static ip address. In ipv4, it's Dynamic Host
     Configuration Protocol(DHCP) who does the basic Network layer configuration.
     In ipv6, ip address configuration is distributed.
  2. Your sys should anwser : If you have multiple network interface (e.g. an
     ethernet and a wifi), how do you decide which one to use? ...
*** Network Manager
  A system daemon that runs upon boots.
**** Network manager command line interface
  #+BEGIN_SRC bash
    nmcli                           # see basic conectivity
    nm-online                       # am I connected?
    # see config
    cat /etc/NetworkManager/NetworkManager.conf
  #+END_SRC
* End
# Local Variables:
# org-what-lang-is-for: "bash"
# fill-column: 50
# End:
